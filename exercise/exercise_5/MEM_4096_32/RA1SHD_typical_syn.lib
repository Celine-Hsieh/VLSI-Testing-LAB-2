/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARTISAN COMPONENTS, INC.
 *      
 *      Copyright (c) 2016  Artisan Components, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with Artisan Components, Inc. In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			SRAM-SP SRAM Generator
 *           			TSMC CL018G
 *      version:		2004Q1V1
 *      comment:		
 *      configuration:	 -instname RA1SHD -words 4096 -bits 32 -frequency 1 -ring_width 2 -mux 16 -drive 12 -write_mask off -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -libname USERLIB
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD
 *      Words:          4096
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        typical
 *      Delays:		max
 *
 *      Creation Date:  2016-07-28 09:55:02Z
 *      Version:        2004Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2016-07-28 09:55:02Z";
	comment			: "Confidential Information of Artisan Components, Inc.  Use subject to Artisan Components license. Copyright (c) 2016 Artisan Components, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.800;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 2.800;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(typical) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.800;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : typical;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(RA1SHD_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RA1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 32;
		bit_from : 31;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 12;
		bit_from : 11;
		bit_to : 0 ;
		downto : true ;
	}
cell(RA1SHD) {
	area		 : 835512.042;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 12;
		word_width : 32;
	}
	bus(Q)	 {
		bus_type : RA1SHD_DATA;
		direction : output;
		max_capacitance : 3.422;
		capacitance : 0.022;
                three_state : "OEN" ;
                memory_read() {
			address : A;
		}
		timing() {
			related_pin :	"CLK" ;
			timing_type : rising_edge;
			timing_sense : non_unate;
			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.421, 1.436, 1.479, 1.569, 1.721, 2.176, 2.649", \
			  "1.424, 1.439, 1.482, 1.572, 1.724, 2.179, 2.652", \
			  "1.434, 1.449, 1.492, 1.583, 1.734, 2.189, 2.662", \
			  "1.455, 1.470, 1.513, 1.603, 1.755, 2.210, 2.683", \
			  "1.490, 1.504, 1.548, 1.638, 1.790, 2.245, 2.718", \
			  "1.559, 1.574, 1.617, 1.707, 1.859, 2.314, 2.787", \
			  "1.615, 1.629, 1.673, 1.763, 1.914, 2.369, 2.843" \
			)
			}
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.058, 0.089, 0.182, 0.375, 0.700, 1.674, 2.687")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.418, 1.426, 1.453, 1.508, 1.600, 1.876, 2.164", \
			  "1.420, 1.429, 1.455, 1.510, 1.603, 1.879, 2.167", \
			  "1.431, 1.440, 1.466, 1.521, 1.613, 1.890, 2.177", \
			  "1.452, 1.460, 1.487, 1.542, 1.634, 1.910, 2.198", \
			  "1.486, 1.495, 1.521, 1.576, 1.668, 1.945, 2.233", \
			  "1.556, 1.564, 1.591, 1.646, 1.738, 2.014, 2.302", \
			  "1.611, 1.620, 1.646, 1.701, 1.793, 2.070, 2.357" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.044, 0.060, 0.111, 0.216, 0.393, 0.923, 1.475")
		}	}
		timing() {
			related_pin :	"OEN" ;
                        timing_type : three_state_disable ;
			timing_sense : non_unate;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.650, 0.650, 0.650, 0.714, 0.865, 1.320, 1.793", \
			  "0.651, 0.651, 0.651, 0.719, 0.871, 1.326, 1.799", \
			  "0.654, 0.654, 0.654, 0.741, 0.893, 1.348, 1.821", \
			  "0.660, 0.660, 0.694, 0.784, 0.936, 1.391, 1.864", \
			  "0.708, 0.723, 0.766, 0.856, 1.008, 1.463, 1.936", \
			  "0.853, 0.867, 0.910, 1.001, 1.152, 1.607, 2.080", \
			  "0.968, 0.982, 1.026, 1.116, 1.268, 1.723, 2.196" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.058, 0.089, 0.182, 0.375, 0.700, 1.674, 2.687")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.650, 0.650, 0.650, 0.650, 0.693, 0.969, 1.257", \
			  "0.651, 0.651, 0.651, 0.651, 0.698, 0.975, 1.263", \
			  "0.654, 0.654, 0.654, 0.654, 0.720, 0.997, 1.284", \
			  "0.660, 0.660, 0.660, 0.671, 0.763, 1.040, 1.327", \
			  "0.670, 0.670, 0.688, 0.743, 0.835, 1.112, 1.400", \
			  "0.797, 0.806, 0.832, 0.887, 0.980, 1.256, 1.544", \
			  "0.913, 0.922, 0.948, 1.003, 1.095, 1.372, 1.659" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.044, 0.060, 0.111, 0.216, 0.393, 0.923, 1.475")
		}	}
		timing() {
			related_pin :	"OEN" ;
			timing_sense : non_unate;
                        timing_type : three_state_enable ;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.650, 0.650, 0.650, 0.714, 0.865, 1.320, 1.793", \
			  "0.651, 0.651, 0.651, 0.719, 0.871, 1.326, 1.799", \
			  "0.654, 0.654, 0.654, 0.741, 0.893, 1.348, 1.821", \
			  "0.660, 0.660, 0.694, 0.784, 0.936, 1.391, 1.864", \
			  "0.708, 0.723, 0.766, 0.856, 1.008, 1.463, 1.936", \
			  "0.853, 0.867, 0.910, 1.001, 1.152, 1.607, 2.080", \
			  "0.968, 0.982, 1.026, 1.116, 1.268, 1.723, 2.196" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.058, 0.089, 0.182, 0.375, 0.700, 1.674, 2.687")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.650, 0.650, 0.650, 0.650, 0.693, 0.969, 1.257", \
			  "0.651, 0.651, 0.651, 0.651, 0.698, 0.975, 1.263", \
			  "0.654, 0.654, 0.654, 0.654, 0.720, 0.997, 1.284", \
			  "0.660, 0.660, 0.660, 0.671, 0.763, 1.040, 1.327", \
			  "0.670, 0.670, 0.688, 0.743, 0.835, 1.112, 1.400", \
			  "0.797, 0.806, 0.832, 0.887, 0.980, 1.256, 1.544", \
			  "0.913, 0.922, 0.948, 1.003, 1.095, 1.372, 1.659" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.044, 0.060, 0.111, 0.216, 0.393, 0.923, 1.475")
		}	}
        }

	pin(CLK) {
		direction : input;
		capacitance : 0.273
		clock	: true;
		min_pulse_width_low	: 0.173;
		min_pulse_width_high	: 0.105;
		min_period		: 1.354;
		max_transition		: 2.800;
		internal_power(){
			when : "!CEN & WEN";
        		rise_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("222.814, 222.814")
        		}
        		fall_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
		internal_power(){
			when : "!CEN & !WEN";
			rise_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
	    			values ("283.326, 283.326")
			}	
			fall_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
			}	
		}
         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.063, 0.063")
                 }
         }
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.405, 0.404, 0.402, 0.397, 0.392, 0.512, 0.607", \
			  "0.402, 0.401, 0.399, 0.394, 0.389, 0.509, 0.605", \
			  "0.392, 0.391, 0.389, 0.384, 0.379, 0.498, 0.594", \
			  "0.371, 0.370, 0.368, 0.363, 0.358, 0.478, 0.573", \
			  "0.336, 0.335, 0.333, 0.328, 0.323, 0.443, 0.539", \
			  "0.267, 0.266, 0.264, 0.259, 0.254, 0.374, 0.469", \
			  "0.211, 0.211, 0.208, 0.204, 0.199, 0.318, 0.414" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.405, 0.404, 0.402, 0.397, 0.392, 0.512, 0.607", \
			  "0.402, 0.401, 0.399, 0.394, 0.389, 0.509, 0.605", \
			  "0.392, 0.391, 0.389, 0.384, 0.379, 0.498, 0.594", \
			  "0.371, 0.370, 0.368, 0.363, 0.358, 0.478, 0.573", \
			  "0.336, 0.335, 0.333, 0.328, 0.323, 0.443, 0.539", \
			  "0.267, 0.266, 0.264, 0.259, 0.254, 0.374, 0.469", \
			  "0.211, 0.211, 0.208, 0.204, 0.199, 0.318, 0.414" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.006", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.014, 0.027", \
			  "0.018, 0.018, 0.021, 0.025, 0.033, 0.049, 0.061", \
			  "0.087, 0.088, 0.090, 0.095, 0.102, 0.118, 0.131", \
			  "0.142, 0.143, 0.145, 0.150, 0.158, 0.174, 0.186" \
			)
				
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.006", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.014, 0.027", \
			  "0.018, 0.018, 0.021, 0.025, 0.033, 0.049, 0.061", \
			  "0.087, 0.088, 0.090, 0.095, 0.102, 0.118, 0.131", \
			  "0.142, 0.143, 0.145, 0.150, 0.158, 0.174, 0.186" \
			)
	}	}	}


	pin(OEN)	{
		direction	 : input;
		capacitance : 0.010;
	}
	pin(WEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.372, 0.377, 0.394, 0.429, 0.487, 0.603, 0.695", \
			  "0.370, 0.374, 0.392, 0.426, 0.484, 0.600, 0.693", \
			  "0.359, 0.364, 0.381, 0.416, 0.474, 0.590, 0.682", \
			  "0.338, 0.343, 0.360, 0.395, 0.453, 0.569, 0.662", \
			  "0.304, 0.308, 0.326, 0.360, 0.418, 0.534, 0.627", \
			  "0.234, 0.239, 0.256, 0.291, 0.349, 0.465, 0.558", \
			  "0.179, 0.184, 0.201, 0.236, 0.294, 0.409, 0.502" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.372, 0.377, 0.394, 0.429, 0.487, 0.603, 0.695", \
			  "0.370, 0.374, 0.392, 0.426, 0.484, 0.600, 0.693", \
			  "0.359, 0.364, 0.381, 0.416, 0.474, 0.590, 0.682", \
			  "0.338, 0.343, 0.360, 0.395, 0.453, 0.569, 0.662", \
			  "0.304, 0.308, 0.326, 0.360, 0.418, 0.534, 0.627", \
			  "0.234, 0.239, 0.256, 0.291, 0.349, 0.465, 0.558", \
			  "0.179, 0.184, 0.201, 0.236, 0.294, 0.409, 0.502" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.030, 0.026, 0.008, 0.000, 0.000, 0.000, 0.000", \
			  "0.099, 0.095, 0.077, 0.043, 0.000, 0.000, 0.000", \
			  "0.155, 0.150, 0.133, 0.098, 0.040, 0.000, 0.000" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.030, 0.026, 0.008, 0.000, 0.000, 0.000, 0.000", \
			  "0.099, 0.095, 0.077, 0.043, 0.000, 0.000, 0.000", \
			  "0.155, 0.150, 0.133, 0.098, 0.040, 0.000, 0.000" \
			)
	}	}	}

	bus(A)  {
		bus_type : RA1SHD_ADDRESS;
		direction : input;
		capacitance : 0.053;
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.344, 0.344, 0.343, 0.342, 0.340, 0.415, 0.481", \
			  "0.341, 0.341, 0.341, 0.340, 0.338, 0.412, 0.478", \
			  "0.331, 0.331, 0.330, 0.329, 0.327, 0.402, 0.468", \
			  "0.310, 0.310, 0.309, 0.308, 0.306, 0.381, 0.447", \
			  "0.275, 0.275, 0.275, 0.274, 0.272, 0.346, 0.412", \
			  "0.206, 0.206, 0.205, 0.204, 0.202, 0.277, 0.343", \
			  "0.151, 0.150, 0.150, 0.149, 0.147, 0.221, 0.287" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.344, 0.344, 0.343, 0.342, 0.340, 0.415, 0.481", \
			  "0.341, 0.341, 0.341, 0.340, 0.338, 0.412, 0.478", \
			  "0.331, 0.331, 0.330, 0.329, 0.327, 0.402, 0.468", \
			  "0.310, 0.310, 0.309, 0.308, 0.306, 0.381, 0.447", \
			  "0.275, 0.275, 0.275, 0.274, 0.272, 0.346, 0.412", \
			  "0.206, 0.206, 0.205, 0.204, 0.202, 0.277, 0.343", \
			  "0.151, 0.150, 0.150, 0.149, 0.147, 0.221, 0.287" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.036, 0.036, 0.036, 0.038, 0.039, 0.043, 0.046", \
			  "0.039, 0.039, 0.039, 0.040, 0.042, 0.046, 0.049", \
			  "0.049, 0.049, 0.050, 0.051, 0.053, 0.056, 0.059", \
			  "0.070, 0.070, 0.070, 0.072, 0.073, 0.077, 0.080", \
			  "0.104, 0.105, 0.105, 0.106, 0.108, 0.112, 0.115", \
			  "0.174, 0.174, 0.174, 0.176, 0.177, 0.181, 0.184", \
			  "0.229, 0.229, 0.230, 0.231, 0.233, 0.236, 0.239" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.043, 0.040, 0.028, 0.003, 0.000, 0.000, 0.000", \
			  "0.099, 0.095, 0.083, 0.058, 0.017, 0.000, 0.000" \
			)
	}	}	

         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("2.556, 2.556")
                 }
         }

}
	bus(D)	 {
		bus_type : RA1SHD_DATA;
		direction : input;
		capacitance : 0.003;
		memory_write() {
			address : A;
			clocked_on : "CLK";
		}
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.213, 0.213, 0.214, 0.215, 0.242, 0.378, 0.487", \
			  "0.210, 0.210, 0.211, 0.212, 0.239, 0.376, 0.484", \
			  "0.200, 0.200, 0.200, 0.201, 0.229, 0.365, 0.474", \
			  "0.179, 0.179, 0.180, 0.181, 0.208, 0.344, 0.453", \
			  "0.144, 0.144, 0.145, 0.146, 0.173, 0.310, 0.419", \
			  "0.075, 0.075, 0.076, 0.077, 0.104, 0.240, 0.349", \
			  "0.020, 0.020, 0.020, 0.021, 0.049, 0.185, 0.294" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.213, 0.213, 0.214, 0.215, 0.242, 0.378, 0.487", \
			  "0.210, 0.210, 0.211, 0.212, 0.239, 0.376, 0.484", \
			  "0.200, 0.200, 0.200, 0.201, 0.229, 0.365, 0.474", \
			  "0.179, 0.179, 0.180, 0.181, 0.208, 0.344, 0.453", \
			  "0.144, 0.144, 0.145, 0.146, 0.173, 0.310, 0.419", \
			  "0.075, 0.075, 0.076, 0.077, 0.104, 0.240, 0.349", \
			  "0.020, 0.020, 0.020, 0.021, 0.049, 0.185, 0.294" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.010, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.030, 0.025, 0.005, 0.000, 0.000, 0.000, 0.000", \
			  "0.065, 0.060, 0.039, 0.000, 0.000, 0.000, 0.000", \
			  "0.134, 0.129, 0.109, 0.068, 0.011, 0.007, 0.005", \
			  "0.190, 0.184, 0.164, 0.123, 0.066, 0.063, 0.060" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.000, 2.800");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.010, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.030, 0.025, 0.005, 0.000, 0.000, 0.000, 0.000", \
			  "0.065, 0.060, 0.039, 0.000, 0.000, 0.000, 0.000", \
			  "0.134, 0.129, 0.109, 0.068, 0.011, 0.007, 0.005", \
			  "0.190, 0.184, 0.164, 0.123, 0.066, 0.063, 0.060" \
			)
		}	}
	}

	cell_leakage_power : 0.009;
  }
}
