/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARTISAN COMPONENTS, INC.
 *      
 *      Copyright (c) 2016  Artisan Components, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with Artisan Components, Inc. In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			SRAM-SP SRAM Generator
 *           			TSMC CL018G
 *      version:		2004Q1V1
 *      comment:		
 *      configuration:	 -instname RA1SHD -words 4096 -bits 32 -frequency 1 -ring_width 2 -mux 16 -drive 12 -write_mask off -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -libname USERLIB
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD
 *      Words:          4096
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        fast@0C
 *      Delays:		min
 *
 *      Creation Date:  2016-07-28 09:54:58Z
 *      Version:        2004Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2016-07-28 09:54:58Z";
	comment			: "Confidential Information of Artisan Components, Inc.  Use subject to Artisan Components license. Copyright (c) 2016 Artisan Components, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 0.000;
	nom_voltage		: 1.980;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 2.000;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(fast@0C) {
		process	 : 1;
		temperature	 : 0.000;
		voltage	 : 1.980;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : fast@0C;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(RA1SHD_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RA1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 32;
		bit_from : 31;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 12;
		bit_from : 11;
		bit_to : 0 ;
		downto : true ;
	}
cell(RA1SHD) {
	area		 : 835512.042;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 12;
		word_width : 32;
	}
	bus(Q)	 {
		bus_type : RA1SHD_DATA;
		direction : output;
		max_capacitance : 3.422;
		capacitance : 0.022;
                three_state : "OEN" ;
                memory_read() {
			address : A;
		}
		timing() {
			related_pin :	"CLK" ;
			timing_type : rising_edge;
			timing_sense : non_unate;
			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.932, 0.941, 0.962, 1.005, 1.079, 1.298, 1.526", \
			  "0.932, 0.941, 0.962, 1.005, 1.079, 1.298, 1.526", \
			  "0.932, 0.941, 0.962, 1.006, 1.079, 1.298, 1.526", \
			  "0.932, 0.942, 0.962, 1.006, 1.079, 1.299, 1.527", \
			  "0.933, 0.942, 0.963, 1.007, 1.080, 1.299, 1.527", \
			  "0.934, 0.943, 0.964, 1.007, 1.080, 1.300, 1.528", \
			  "0.934, 0.943, 0.964, 1.008, 1.081, 1.300, 1.528" \
			)
			}
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.049, 0.072, 0.141, 0.285, 0.527, 1.252, 2.005")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.932, 0.941, 0.962, 1.005, 1.079, 1.298, 1.526", \
			  "0.932, 0.941, 0.962, 1.005, 1.079, 1.298, 1.526", \
			  "0.932, 0.941, 0.962, 1.006, 1.079, 1.298, 1.526", \
			  "0.932, 0.942, 0.962, 1.006, 1.079, 1.299, 1.527", \
			  "0.933, 0.942, 0.963, 1.007, 1.080, 1.299, 1.527", \
			  "0.934, 0.943, 0.964, 1.007, 1.080, 1.300, 1.528", \
			  "0.934, 0.943, 0.964, 1.008, 1.081, 1.300, 1.528" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.032, 0.045, 0.083, 0.162, 0.296, 0.695, 1.111")
		}	}
		timing() {
			related_pin :	"OEN" ;
                        timing_type : three_state_disable ;
			timing_sense : non_unate;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.409, 0.420, 0.452, 0.512, 0.512, 0.512, 0.512", \
			  "0.415, 0.426, 0.459, 0.512, 0.512, 0.512, 0.512", \
			  "0.440, 0.450, 0.483, 0.512, 0.512, 0.512, 0.512", \
			  "0.488, 0.499, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.512, 0.512, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.049, 0.072, 0.141, 0.285, 0.527, 1.252, 2.005")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.366, 0.373, 0.394, 0.438, 0.511, 0.512, 0.512", \
			  "0.373, 0.380, 0.401, 0.444, 0.512, 0.512, 0.512", \
			  "0.397, 0.404, 0.425, 0.468, 0.512, 0.512, 0.512", \
			  "0.445, 0.452, 0.473, 0.512, 0.512, 0.512, 0.512", \
			  "0.512, 0.512, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.032, 0.045, 0.083, 0.162, 0.296, 0.695, 1.111")
		}	}
		timing() {
			related_pin :	"OEN" ;
			timing_sense : non_unate;
                        timing_type : three_state_enable ;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.409, 0.420, 0.452, 0.512, 0.512, 0.512, 0.512", \
			  "0.415, 0.426, 0.459, 0.512, 0.512, 0.512, 0.512", \
			  "0.440, 0.450, 0.483, 0.512, 0.512, 0.512, 0.512", \
			  "0.488, 0.499, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.512, 0.512, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.049, 0.072, 0.141, 0.285, 0.527, 1.252, 2.005")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "0.366, 0.373, 0.394, 0.438, 0.511, 0.512, 0.512", \
			  "0.373, 0.380, 0.401, 0.444, 0.512, 0.512, 0.512", \
			  "0.397, 0.404, 0.425, 0.468, 0.512, 0.512, 0.512", \
			  "0.445, 0.452, 0.473, 0.512, 0.512, 0.512, 0.512", \
			  "0.512, 0.512, 0.512, 0.512, 0.512, 0.512, 0.512", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511", \
			  "0.511, 0.511, 0.511, 0.511, 0.511, 0.511, 0.511" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.032, 0.045, 0.083, 0.162, 0.296, 0.695, 1.111")
		}	}
        }

	pin(CLK) {
		direction : input;
		capacitance : 0.283
		clock	: true;
		min_pulse_width_low	: 0.114;
		min_pulse_width_high	: 0.081;
		min_period		: 0.974;
		max_transition		: 2.000;
		internal_power(){
			when : "!CEN & WEN";
        		rise_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("281.214, 281.214")
        		}
        		fall_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
		internal_power(){
			when : "!CEN & !WEN";
			rise_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
	    			values ("353.568, 353.568")
			}	
			fall_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
			}	
		}
         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.060, 0.060")
                 }
         }
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.299, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.299, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.298, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.298, 0.297, 0.291, 0.281, 0.319, 0.388, 0.456", \
			  "0.297, 0.296, 0.291, 0.280, 0.319, 0.387, 0.455", \
			  "0.297, 0.296, 0.290, 0.280, 0.318, 0.386, 0.455", \
			  "0.296, 0.295, 0.290, 0.279, 0.318, 0.386, 0.454" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.299, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.299, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.298, 0.297, 0.292, 0.281, 0.320, 0.388, 0.456", \
			  "0.298, 0.297, 0.291, 0.281, 0.319, 0.388, 0.456", \
			  "0.297, 0.296, 0.291, 0.280, 0.319, 0.387, 0.455", \
			  "0.297, 0.296, 0.290, 0.280, 0.318, 0.386, 0.455", \
			  "0.296, 0.295, 0.290, 0.279, 0.318, 0.386, 0.454" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.038", \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.038", \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.039", \
			  "0.000, 0.000, 0.000, 0.000, 0.004, 0.021, 0.039", \
			  "0.000, 0.000, 0.000, 0.000, 0.004, 0.022, 0.040", \
			  "0.000, 0.000, 0.000, 0.000, 0.005, 0.022, 0.040", \
			  "0.000, 0.000, 0.000, 0.000, 0.005, 0.023, 0.041" \
			)
				
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.038", \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.038", \
			  "0.000, 0.000, 0.000, 0.000, 0.003, 0.021, 0.039", \
			  "0.000, 0.000, 0.000, 0.000, 0.004, 0.021, 0.039", \
			  "0.000, 0.000, 0.000, 0.000, 0.004, 0.022, 0.040", \
			  "0.000, 0.000, 0.000, 0.000, 0.005, 0.022, 0.040", \
			  "0.000, 0.000, 0.000, 0.000, 0.005, 0.023, 0.041" \
			)
	}	}	}


	pin(OEN)	{
		direction	 : input;
		capacitance : 0.010;
	}
	pin(WEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.252, 0.257, 0.277, 0.316, 0.382, 0.448, 0.513", \
			  "0.252, 0.257, 0.277, 0.316, 0.382, 0.448, 0.513", \
			  "0.251, 0.257, 0.276, 0.316, 0.382, 0.447, 0.513", \
			  "0.251, 0.256, 0.276, 0.315, 0.381, 0.447, 0.513", \
			  "0.250, 0.256, 0.275, 0.315, 0.381, 0.446, 0.512", \
			  "0.250, 0.255, 0.275, 0.314, 0.380, 0.446, 0.512", \
			  "0.249, 0.255, 0.274, 0.314, 0.380, 0.445, 0.511" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.252, 0.257, 0.277, 0.316, 0.382, 0.448, 0.513", \
			  "0.252, 0.257, 0.277, 0.316, 0.382, 0.448, 0.513", \
			  "0.251, 0.257, 0.276, 0.316, 0.382, 0.447, 0.513", \
			  "0.251, 0.256, 0.276, 0.315, 0.381, 0.447, 0.513", \
			  "0.250, 0.256, 0.275, 0.315, 0.381, 0.446, 0.512", \
			  "0.250, 0.255, 0.275, 0.314, 0.380, 0.446, 0.512", \
			  "0.249, 0.255, 0.274, 0.314, 0.380, 0.445, 0.511" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
	}	}	}

	bus(A)  {
		bus_type : RA1SHD_ADDRESS;
		direction : input;
		capacitance : 0.054;
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.238, 0.242, 0.256, 0.285, 0.332, 0.379, 0.427", \
			  "0.238, 0.242, 0.256, 0.285, 0.332, 0.379, 0.427", \
			  "0.238, 0.242, 0.256, 0.284, 0.332, 0.379, 0.427", \
			  "0.238, 0.241, 0.256, 0.284, 0.331, 0.379, 0.426", \
			  "0.237, 0.241, 0.255, 0.284, 0.331, 0.378, 0.426", \
			  "0.237, 0.240, 0.255, 0.283, 0.330, 0.378, 0.425", \
			  "0.236, 0.240, 0.254, 0.282, 0.330, 0.377, 0.425" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.238, 0.242, 0.256, 0.285, 0.332, 0.379, 0.427", \
			  "0.238, 0.242, 0.256, 0.285, 0.332, 0.379, 0.427", \
			  "0.238, 0.242, 0.256, 0.284, 0.332, 0.379, 0.427", \
			  "0.238, 0.241, 0.256, 0.284, 0.331, 0.379, 0.426", \
			  "0.237, 0.241, 0.255, 0.284, 0.331, 0.378, 0.426", \
			  "0.237, 0.240, 0.255, 0.283, 0.330, 0.378, 0.425", \
			  "0.236, 0.240, 0.254, 0.282, 0.330, 0.377, 0.425" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.049, 0.050, 0.053, 0.058, 0.068, 0.077, 0.086", \
			  "0.050, 0.050, 0.053, 0.058, 0.068, 0.077, 0.086", \
			  "0.050, 0.050, 0.053, 0.059, 0.068, 0.077, 0.086", \
			  "0.050, 0.051, 0.053, 0.059, 0.068, 0.077, 0.086", \
			  "0.051, 0.051, 0.054, 0.060, 0.069, 0.078, 0.087", \
			  "0.051, 0.052, 0.055, 0.060, 0.069, 0.078, 0.088", \
			  "0.052, 0.052, 0.055, 0.061, 0.070, 0.079, 0.088" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
	}	}	

         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("3.316, 3.316")
                 }
         }

}
	bus(D)	 {
		bus_type : RA1SHD_DATA;
		direction : input;
		capacitance : 0.003;
		memory_write() {
			address : A;
			clocked_on : "CLK";
		}
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.133, 0.132, 0.129, 0.148, 0.226, 0.305, 0.383", \
			  "0.133, 0.132, 0.129, 0.148, 0.226, 0.305, 0.383", \
			  "0.132, 0.132, 0.129, 0.147, 0.226, 0.305, 0.383", \
			  "0.132, 0.131, 0.128, 0.147, 0.226, 0.304, 0.383", \
			  "0.132, 0.131, 0.128, 0.146, 0.225, 0.304, 0.382", \
			  "0.131, 0.130, 0.127, 0.146, 0.225, 0.303, 0.382", \
			  "0.130, 0.130, 0.127, 0.145, 0.224, 0.303, 0.381" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.133, 0.132, 0.129, 0.148, 0.226, 0.305, 0.383", \
			  "0.133, 0.132, 0.129, 0.148, 0.226, 0.305, 0.383", \
			  "0.132, 0.132, 0.129, 0.147, 0.226, 0.305, 0.383", \
			  "0.132, 0.131, 0.128, 0.147, 0.226, 0.304, 0.383", \
			  "0.132, 0.131, 0.128, 0.146, 0.225, 0.304, 0.382", \
			  "0.131, 0.130, 0.127, 0.146, 0.225, 0.303, 0.382", \
			  "0.130, 0.130, 0.127, 0.145, 0.224, 0.303, 0.381" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.011, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.012, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.012, 0.006, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.013, 0.007, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 1.500, 2.000");
			values ( \
			  "0.011, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.011, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.012, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.012, 0.006, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.013, 0.007, 0.000, 0.000, 0.000, 0.000, 0.000" \
			)
		}	}
	}

	cell_leakage_power : 0.016;
  }
}
