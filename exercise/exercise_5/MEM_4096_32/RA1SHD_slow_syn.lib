/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARTISAN COMPONENTS, INC.
 *      
 *      Copyright (c) 2016  Artisan Components, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with Artisan Components, Inc. In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			SRAM-SP SRAM Generator
 *           			TSMC CL018G
 *      version:		2004Q1V1
 *      comment:		
 *      configuration:	 -instname RA1SHD -words 4096 -bits 32 -frequency 1 -ring_width 2 -mux 16 -drive 12 -write_mask off -wp_size 8 -top_layer met6 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -libname USERLIB
 *
 *      Synopsys model for Synchronous Single-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RA1SHD
 *      Words:          4096
 *      Word Width:     32
 *      Mux:            16
 *      Pipeline:       No
 *      Process:        slow
 *      Delays:		max
 *
 *      Creation Date:  2016-07-28 09:55:04Z
 *      Version:        2004Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2016-07-28 09:55:04Z";
	comment			: "Confidential Information of Artisan Components, Inc.  Use subject to Artisan Components license. Copyright (c) 2016 Artisan Components, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.620;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 4.000;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(slow) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.620;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : slow;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(RA1SHD_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RA1SHD_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RA1SHD_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RA1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 32;
		bit_from : 31;
		bit_to : 0 ;
		downto : true ;
	}
	type (RA1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 12;
		bit_from : 11;
		bit_to : 0 ;
		downto : true ;
	}
cell(RA1SHD) {
	area		 : 835512.042;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 12;
		word_width : 32;
	}
	bus(Q)	 {
		bus_type : RA1SHD_DATA;
		direction : output;
		max_capacitance : 3.422;
		capacitance : 0.022;
                three_state : "OEN" ;
                memory_read() {
			address : A;
		}
		timing() {
			related_pin :	"CLK" ;
			timing_type : rising_edge;
			timing_sense : non_unate;
			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "2.419, 2.440, 2.504, 2.637, 2.861, 3.532, 4.230", \
			  "2.425, 2.447, 2.511, 2.644, 2.867, 3.538, 4.236", \
			  "2.448, 2.470, 2.533, 2.667, 2.890, 3.561, 4.259", \
			  "2.494, 2.516, 2.579, 2.713, 2.936, 3.607, 4.305", \
			  "2.571, 2.592, 2.656, 2.789, 3.013, 3.684, 4.381", \
			  "2.801, 2.822, 2.886, 3.019, 3.243, 3.913, 4.611", \
			  "3.030, 3.052, 3.116, 3.249, 3.472, 4.143, 4.841" \
			)
			}
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.075, 0.121, 0.261, 0.553, 1.043, 2.513, 4.041")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "2.420, 2.433, 2.474, 2.559, 2.701, 3.128, 3.572", \
			  "2.426, 2.440, 2.480, 2.565, 2.707, 3.134, 3.579", \
			  "2.449, 2.463, 2.503, 2.588, 2.730, 3.157, 3.602", \
			  "2.495, 2.509, 2.549, 2.634, 2.776, 3.203, 3.647", \
			  "2.572, 2.585, 2.626, 2.711, 2.853, 3.280, 3.724", \
			  "2.801, 2.815, 2.856, 2.940, 3.083, 3.510, 3.954", \
			  "3.031, 3.045, 3.085, 3.170, 3.312, 3.740, 4.184" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.068, 0.093, 0.170, 0.329, 0.596, 1.399, 2.233")
		}	}
		timing() {
			related_pin :	"OEN" ;
                        timing_type : three_state_disable ;
			timing_sense : non_unate;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.039, 1.039, 1.039, 1.134, 1.358, 2.029, 2.726", \
			  "1.042, 1.042, 1.042, 1.139, 1.363, 2.034, 2.731", \
			  "1.054, 1.054, 1.054, 1.158, 1.382, 2.053, 2.751", \
			  "1.079, 1.079, 1.079, 1.197, 1.420, 2.091, 2.789", \
			  "1.120, 1.120, 1.127, 1.261, 1.484, 2.155, 2.853", \
			  "1.244, 1.255, 1.319, 1.452, 1.676, 2.347, 3.044", \
			  "1.425, 1.447, 1.511, 1.644, 1.867, 2.538, 3.236" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.075, 0.121, 0.261, 0.553, 1.043, 2.513, 4.041")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.039, 1.039, 1.039, 1.039, 1.117, 1.544, 1.988", \
			  "1.042, 1.042, 1.042, 1.042, 1.122, 1.549, 1.993", \
			  "1.054, 1.054, 1.054, 1.054, 1.141, 1.568, 2.012", \
			  "1.079, 1.079, 1.079, 1.079, 1.180, 1.607, 2.051", \
			  "1.120, 1.120, 1.120, 1.120, 1.243, 1.671, 2.115", \
			  "1.244, 1.244, 1.244, 1.293, 1.435, 1.862, 2.306", \
			  "1.369, 1.369, 1.399, 1.484, 1.627, 2.054, 2.498" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.068, 0.093, 0.170, 0.329, 0.596, 1.399, 2.233")
		}	}
		timing() {
			related_pin :	"OEN" ;
			timing_sense : non_unate;
                        timing_type : three_state_enable ;

			cell_rise(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.039, 1.039, 1.039, 1.134, 1.358, 2.029, 2.726", \
			  "1.042, 1.042, 1.042, 1.139, 1.363, 2.034, 2.731", \
			  "1.054, 1.054, 1.054, 1.158, 1.382, 2.053, 2.751", \
			  "1.079, 1.079, 1.079, 1.197, 1.420, 2.091, 2.789", \
			  "1.120, 1.120, 1.127, 1.261, 1.484, 2.155, 2.853", \
			  "1.244, 1.255, 1.319, 1.452, 1.676, 2.347, 3.044", \
			  "1.425, 1.447, 1.511, 1.644, 1.867, 2.538, 3.236" \
			)
                       }
			rise_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.075, 0.121, 0.261, 0.553, 1.043, 2.513, 4.041")
			}
			cell_fall(RA1SHD_delay_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ( \
			  "1.039, 1.039, 1.039, 1.039, 1.117, 1.544, 1.988", \
			  "1.042, 1.042, 1.042, 1.042, 1.122, 1.549, 1.993", \
			  "1.054, 1.054, 1.054, 1.054, 1.141, 1.568, 2.012", \
			  "1.079, 1.079, 1.079, 1.079, 1.180, 1.607, 2.051", \
			  "1.120, 1.120, 1.120, 1.120, 1.243, 1.671, 2.115", \
			  "1.244, 1.244, 1.244, 1.293, 1.435, 1.862, 2.306", \
			  "1.369, 1.369, 1.399, 1.484, 1.627, 2.054, 2.498" \
			)
			}
			fall_transition(RA1SHD_load_template) {
			index_1 ("0.022, 0.062, 0.182, 0.432, 0.852, 2.112, 3.422");
			values ("0.068, 0.093, 0.170, 0.329, 0.596, 1.399, 2.233")
		}	}
        }

	pin(CLK) {
		direction : input;
		capacitance : 0.252
		clock	: true;
		min_pulse_width_low	: 0.304;
		min_pulse_width_high	: 0.188;
		min_period		: 2.391;
		max_transition		: 4.000;
		internal_power(){
			when : "!CEN & WEN";
        		rise_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("177.368, 177.368")
        		}
        		fall_power(RA1SHD_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
        		}
		}
		internal_power(){
			when : "!CEN & !WEN";
			rise_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
	    			values ("225.643, 225.643")
			}	
			fall_power(RA1SHD_passive_energy_template_1x2) {
	    			index_1 ("0.0 1.0");
            			values ("0.0, 0.0")
			}	
		}
         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("0.082, 0.082")
                 }
         }
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.014;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.654, 0.655, 0.661, 0.672, 0.692, 0.749, 0.866", \
			  "0.647, 0.649, 0.655, 0.666, 0.685, 0.743, 0.860", \
			  "0.625, 0.626, 0.632, 0.643, 0.662, 0.720, 0.837", \
			  "0.579, 0.580, 0.586, 0.597, 0.616, 0.674, 0.791", \
			  "0.502, 0.503, 0.509, 0.521, 0.540, 0.597, 0.714", \
			  "0.272, 0.274, 0.279, 0.291, 0.310, 0.368, 0.484", \
			  "0.042, 0.044, 0.050, 0.061, 0.080, 0.138, 0.255" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.654, 0.655, 0.661, 0.672, 0.692, 0.749, 0.866", \
			  "0.647, 0.649, 0.655, 0.666, 0.685, 0.743, 0.860", \
			  "0.625, 0.626, 0.632, 0.643, 0.662, 0.720, 0.837", \
			  "0.579, 0.580, 0.586, 0.597, 0.616, 0.674, 0.791", \
			  "0.502, 0.503, 0.509, 0.521, 0.540, 0.597, 0.714", \
			  "0.272, 0.274, 0.279, 0.291, 0.310, 0.368, 0.484", \
			  "0.042, 0.044, 0.050, 0.061, 0.080, 0.138, 0.255" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.070, 0.069, 0.063, 0.051, 0.032, 0.000, 0.000", \
			  "0.300, 0.298, 0.293, 0.281, 0.262, 0.205, 0.147", \
			  "0.530, 0.528, 0.522, 0.511, 0.492, 0.434, 0.377" \
			)
				
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.070, 0.069, 0.063, 0.051, 0.032, 0.000, 0.000", \
			  "0.300, 0.298, 0.293, 0.281, 0.262, 0.205, 0.147", \
			  "0.530, 0.528, 0.522, 0.511, 0.492, 0.434, 0.377" \
			)
	}	}	}


	pin(OEN)	{
		direction	 : input;
		capacitance : 0.010;
	}
	pin(WEN) {
		direction : input;
		capacitance : 0.015;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.686, 0.690, 0.705, 0.734, 0.782, 0.927, 1.072", \
			  "0.680, 0.684, 0.698, 0.728, 0.776, 0.921, 1.066", \
			  "0.657, 0.661, 0.676, 0.705, 0.753, 0.898, 1.043", \
			  "0.611, 0.615, 0.630, 0.659, 0.707, 0.852, 0.997", \
			  "0.535, 0.538, 0.553, 0.582, 0.630, 0.775, 0.920", \
			  "0.305, 0.309, 0.323, 0.352, 0.401, 0.546, 0.691", \
			  "0.243, 0.246, 0.258, 0.280, 0.317, 0.428, 0.540" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.686, 0.690, 0.705, 0.734, 0.782, 0.927, 1.072", \
			  "0.680, 0.684, 0.698, 0.728, 0.776, 0.921, 1.066", \
			  "0.657, 0.661, 0.676, 0.705, 0.753, 0.898, 1.043", \
			  "0.611, 0.615, 0.630, 0.659, 0.707, 0.852, 0.997", \
			  "0.535, 0.538, 0.553, 0.582, 0.630, 0.775, 0.920", \
			  "0.305, 0.309, 0.323, 0.352, 0.401, 0.546, 0.691", \
			  "0.243, 0.246, 0.258, 0.280, 0.317, 0.428, 0.540" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.008, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.085, 0.081, 0.066, 0.037, 0.000, 0.000, 0.000", \
			  "0.314, 0.311, 0.296, 0.267, 0.219, 0.074, 0.000", \
			  "0.544, 0.540, 0.526, 0.497, 0.448, 0.303, 0.158" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.008, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.085, 0.081, 0.066, 0.037, 0.000, 0.000, 0.000", \
			  "0.314, 0.311, 0.296, 0.267, 0.219, 0.074, 0.000", \
			  "0.544, 0.540, 0.526, 0.497, 0.448, 0.303, 0.158" \
			)
	}	}	}

	bus(A)  {
		bus_type : RA1SHD_ADDRESS;
		direction : input;
		capacitance : 0.051;
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.659, 0.661, 0.667, 0.679, 0.700, 0.762, 0.824", \
			  "0.653, 0.655, 0.661, 0.673, 0.694, 0.756, 0.818", \
			  "0.630, 0.632, 0.638, 0.650, 0.671, 0.733, 0.795", \
			  "0.584, 0.586, 0.592, 0.604, 0.625, 0.687, 0.749", \
			  "0.507, 0.509, 0.515, 0.528, 0.548, 0.610, 0.672", \
			  "0.278, 0.279, 0.286, 0.298, 0.319, 0.381, 0.442", \
			  "0.048, 0.050, 0.056, 0.068, 0.089, 0.151, 0.213" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.659, 0.661, 0.667, 0.679, 0.700, 0.762, 0.824", \
			  "0.653, 0.655, 0.661, 0.673, 0.694, 0.756, 0.818", \
			  "0.630, 0.632, 0.638, 0.650, 0.671, 0.733, 0.795", \
			  "0.584, 0.586, 0.592, 0.604, 0.625, 0.687, 0.749", \
			  "0.507, 0.509, 0.515, 0.528, 0.548, 0.610, 0.672", \
			  "0.278, 0.279, 0.286, 0.298, 0.319, 0.381, 0.442", \
			  "0.048, 0.050, 0.056, 0.068, 0.089, 0.151, 0.213" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.118, 0.116, 0.110, 0.098, 0.077, 0.015, 0.000", \
			  "0.124, 0.122, 0.116, 0.104, 0.083, 0.021, 0.000", \
			  "0.147, 0.145, 0.139, 0.127, 0.106, 0.044, 0.000", \
			  "0.193, 0.191, 0.185, 0.173, 0.152, 0.090, 0.028", \
			  "0.269, 0.268, 0.262, 0.249, 0.229, 0.167, 0.105", \
			  "0.499, 0.498, 0.491, 0.479, 0.458, 0.396, 0.334", \
			  "0.729, 0.727, 0.721, 0.709, 0.688, 0.626, 0.564" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.003, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.080, 0.078, 0.069, 0.051, 0.021, 0.000, 0.000", \
			  "0.310, 0.307, 0.298, 0.280, 0.251, 0.161, 0.071", \
			  "0.539, 0.537, 0.528, 0.510, 0.480, 0.391, 0.301" \
			)
	}	}	

         internal_power(){
                 when : "CEN";
                 power(RA1SHD_passive_energy_template_1x2) {
                         index_1 ("0.0 1.0");
                         values ("1.981, 1.981")
                 }
         }

}
	bus(D)	 {
		bus_type : RA1SHD_DATA;
		direction : input;
		capacitance : 0.003;
		memory_write() {
			address : A;
			clocked_on : "CLK";
		}
		timing() {
			related_pin	: "CLK"
			timing_type	: setup_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.407, 0.410, 0.420, 0.439, 0.471, 0.568, 0.665", \
			  "0.401, 0.404, 0.414, 0.433, 0.465, 0.562, 0.658", \
			  "0.378, 0.381, 0.391, 0.410, 0.442, 0.539, 0.635", \
			  "0.332, 0.335, 0.345, 0.364, 0.396, 0.493, 0.589", \
			  "0.256, 0.258, 0.268, 0.287, 0.320, 0.416, 0.513", \
			  "0.026, 0.029, 0.038, 0.058, 0.090, 0.186, 0.283", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.053" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.407, 0.410, 0.420, 0.439, 0.471, 0.568, 0.665", \
			  "0.401, 0.404, 0.414, 0.433, 0.465, 0.562, 0.658", \
			  "0.378, 0.381, 0.391, 0.410, 0.442, 0.539, 0.635", \
			  "0.332, 0.335, 0.345, 0.364, 0.396, 0.493, 0.589", \
			  "0.256, 0.258, 0.268, 0.287, 0.320, 0.416, 0.513", \
			  "0.026, 0.029, 0.038, 0.058, 0.090, 0.186, 0.283", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.053" \
			)
		}	}
		timing() {
			related_pin	: "CLK"
			timing_type	: hold_rising ;
			rise_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.046, 0.042, 0.025, 0.000, 0.000, 0.000, 0.000", \
			  "0.123, 0.118, 0.101, 0.067, 0.010, 0.000, 0.000", \
			  "0.353, 0.348, 0.331, 0.297, 0.240, 0.069, 0.000", \
			  "0.582, 0.578, 0.561, 0.527, 0.470, 0.299, 0.128" \
			)
			}
			fall_constraint(RA1SHD_constraint_template) {
			index_1 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			index_2 ("0.010, 0.050, 0.200, 0.500, 1.000, 2.500, 4.000");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.046, 0.042, 0.025, 0.000, 0.000, 0.000, 0.000", \
			  "0.123, 0.118, 0.101, 0.067, 0.010, 0.000, 0.000", \
			  "0.353, 0.348, 0.331, 0.297, 0.240, 0.069, 0.000", \
			  "0.582, 0.578, 0.561, 0.527, 0.470, 0.299, 0.128" \
			)
		}	}
	}

	cell_leakage_power : 0.065;
  }
}
